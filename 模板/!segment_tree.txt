struct segment_tree{
    // [ll, rr)
    struct node{
        int mi=INF;
    } arr[4*MAX_SIZE];

    node combine(node A, node B){
        node ret;
        ret.mi=min(A.mi, B.mi);
        return ret;
    }

    void build(int idx, int ll, int rr, vector<int> &v){
        if (rr-ll==1){
            arr[idx].mi=v[ll];
            return;
        }
        int mid=(ll+rr)/2;
        build(idx*2+1, ll, mid, v);
        build(idx*2+2, mid, rr, v);
        arr[idx]=combine(arr[idx*2+1], arr[idx*2+2]);
    }

    void update(int idx, int ll, int rr, int pos, int val){
        if (rr-ll==1){
            arr[idx].mi=val;
            return;
        }
        int mid=(ll+rr)/2;
        if (pos<mid) update(idx*2+1, ll, mid, pos, val);
        else update(idx*2+2, mid, rr, pos, val);
        arr[idx]=combine(arr[idx*2+1], arr[idx*2+2]);
    }

    node query(int idx, int ll, int rr, int ql, int qr){
        if (ql<=ll && rr<=qr){
            return arr[idx];
        }else if (rr<=ql || qr<=ll){
            return node();
        }else{
            int mid=(ll+rr)/2;
            return combine(query(idx*2+1, ll, mid, ql, qr), query(idx*2+2, mid, rr, ql, qr));
        }
    }
} ST;